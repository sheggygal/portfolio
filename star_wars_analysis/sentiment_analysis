{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kmaFmqfeq8v_",
        "outputId": "0dd72be3-f725-4522-fd2d-5c91f8274de9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: nltk in /usr/local/lib/python3.10/dist-packages (3.8.1)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (from nltk) (8.1.7)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from nltk) (1.4.2)\n",
            "Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.10/dist-packages (from nltk) (2024.5.15)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from nltk) (4.66.4)\n"
          ]
        }
      ],
      "source": [
        "### Installing necessary libraries\n",
        "!pip install nltk"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install wordcloud"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "drFT8MOC3kuP",
        "outputId": "ed512eae-e71e-4b16-f8b9-2a5b12d8e856"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: wordcloud in /usr/local/lib/python3.10/dist-packages (1.9.3)\n",
            "Requirement already satisfied: numpy>=1.6.1 in /usr/local/lib/python3.10/dist-packages (from wordcloud) (1.25.2)\n",
            "Requirement already satisfied: pillow in /usr/local/lib/python3.10/dist-packages (from wordcloud) (9.4.0)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from wordcloud) (3.7.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (4.53.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (24.1)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib->wordcloud) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install beautifulsoup4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tLi89fGhC5qh",
        "outputId": "f3933f5d-59a1-45ac-b97d-70c3fde31600"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (4.12.3)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4) (2.5)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import nltk\n",
        "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
        "from wordcloud import WordCloud\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.decomposition import LatentDirichletAllocation\n",
        "from bs4 import BeautifulSoup\n",
        "import re\n",
        "import spacy\n",
        "from collections import Counter"
      ],
      "metadata": {
        "id": "s_HCQj5Bsq9o"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from nltk import word_tokenize, pos_tag, FreqDist\n",
        "from nltk.corpus import stopwords\n",
        "import nltk\n",
        "nltk.download('punkt')\n",
        "nltk.download('averaged_perceptron_tagger')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i5N_nWDCrZFs",
        "outputId": "44915307-1483-4c17-81de-557abeaa49d5"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n",
            "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
            "[nltk_data]     /root/nltk_data...\n",
            "[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n",
            "[nltk_data]       date!\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Download necessary NLTK data\n",
        "nltk.download('vader_lexicon')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SbU1-_udsvoR",
        "outputId": "bb208899-efa5-4f10-9cd0-db7fce8ccac8"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package vader_lexicon to /root/nltk_data...\n",
            "[nltk_data]   Package vader_lexicon is already up-to-date!\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the data\n",
        "posts_df = pd.read_csv('/content/tumblr_posts.csv')\n",
        "comments_df = pd.read_csv('/content/tumblr_comments.csv')"
      ],
      "metadata": {
        "id": "WJesP4b2tKEL"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Preprocessing the data"
      ],
      "metadata": {
        "id": "kP01Ap3eu2L9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Display the first few rows of the data\n",
        "print(posts_df.head())\n",
        "print(comments_df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fHfIEIqO4pMm",
        "outputId": "c9864cb1-aa7d-4282-e234-8294d95096dc"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                   id           series  \\\n",
            "0  755268424716910592  The Mandalorian   \n",
            "1  755267962199539712  The Mandalorian   \n",
            "2  755267795477987328  The Mandalorian   \n",
            "3  755267744442826752  The Mandalorian   \n",
            "4  755267171554344960  The Mandalorian   \n",
            "\n",
            "                                               title  \\\n",
            "0                   mando doodle with my new markers   \n",
            "1                Cowboy DinLuke for @plattenbauprinz   \n",
            "2  ¿Has intentado este método revolucionario para...   \n",
            "3                                                NaN   \n",
            "4  i would pay so much money to watch this scene ...   \n",
            "\n",
            "                                           post_text  likes  shares  reblogs  \n",
            "0  <p><figure class=\"tmblr-full\"><img src=\"https:...      0       0        0  \n",
            "1  <p><figure class=\"tmblr-full\"><img src=\"https:...      0       0        0  \n",
            "2  <p><h1><b>&iquest;Has intentado este m&eacute;...      0       0        0  \n",
            "3  <p><figure class=\"tmblr-full\"><img src=\"https:...      0       0        0  \n",
            "4  <p><p>i would pay so much money to watch this ...      1       0        0  \n",
            "Empty DataFrame\n",
            "Columns: [post_id, comment]\n",
            "Index: []\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "posts_df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q7KhMXDPek5_",
        "outputId": "8796dee9-d871-40bd-a004-2101c2faf558"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 120 entries, 0 to 119\n",
            "Data columns (total 7 columns):\n",
            " #   Column     Non-Null Count  Dtype \n",
            "---  ------     --------------  ----- \n",
            " 0   id         120 non-null    int64 \n",
            " 1   series     120 non-null    object\n",
            " 2   title      117 non-null    object\n",
            " 3   post_text  117 non-null    object\n",
            " 4   likes      120 non-null    int64 \n",
            " 5   shares     120 non-null    int64 \n",
            " 6   reblogs    120 non-null    int64 \n",
            "dtypes: int64(4), object(3)\n",
            "memory usage: 6.7+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "posts_df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qb56HqkXepjZ",
        "outputId": "ab50a7ee-137d-4557-c7d4-797115cc2342"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(120, 7)"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "posts_df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "Tr87bf5Xized",
        "outputId": "eda857d5-63b7-4207-9341-8cadd469a40e"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 id       likes  shares  reblogs\n",
              "count  1.200000e+02  120.000000   120.0    120.0\n",
              "mean   7.548399e+17   19.400000     0.0      0.0\n",
              "std    7.755971e+14   99.360256     0.0      0.0\n",
              "min    7.518228e+17    0.000000     0.0      0.0\n",
              "25%    7.549165e+17    1.000000     0.0      0.0\n",
              "50%    7.551704e+17    3.000000     0.0      0.0\n",
              "75%    7.552558e+17    5.000000     0.0      0.0\n",
              "max    7.552688e+17  881.000000     0.0      0.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-84b9bc5d-d8db-48f8-864f-00f15c553d4f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>likes</th>\n",
              "      <th>shares</th>\n",
              "      <th>reblogs</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1.200000e+02</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>120.0</td>\n",
              "      <td>120.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>7.548399e+17</td>\n",
              "      <td>19.400000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>7.755971e+14</td>\n",
              "      <td>99.360256</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>7.518228e+17</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>7.549165e+17</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>7.551704e+17</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>7.552558e+17</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>7.552688e+17</td>\n",
              "      <td>881.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-84b9bc5d-d8db-48f8-864f-00f15c553d4f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-84b9bc5d-d8db-48f8-864f-00f15c553d4f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-84b9bc5d-d8db-48f8-864f-00f15c553d4f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1f74f5e1-9739-4046-86d3-56fed23420f6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1f74f5e1-9739-4046-86d3-56fed23420f6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1f74f5e1-9739-4046-86d3-56fed23420f6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"posts_df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.49109183870757e+17,\n        \"min\": 120.0,\n        \"max\": 7.552687977457582e+17,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7.54839907200723e+17,\n          7.551704214841836e+17,\n          120.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"likes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 302.7451441201643,\n        \"min\": 0.0,\n        \"max\": 881.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          19.4,\n          3.0,\n          120.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"shares\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 42.42640687119285,\n        \"min\": 0.0,\n        \"max\": 120.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          120.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reblogs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 42.42640687119285,\n        \"min\": 0.0,\n        \"max\": 120.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          120.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "posts_df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tofa7IHNi_fd",
        "outputId": "5748a090-afc8-419b-855c-0e4d91187a9c"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id           0\n",
              "series       0\n",
              "title        3\n",
              "post_text    3\n",
              "likes        0\n",
              "shares       0\n",
              "reblogs      0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Cleaning the data"
      ],
      "metadata": {
        "id": "K43JyTduu-TD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop duplicates\n",
        "posts_df.drop_duplicates(subset='id', keep='first', inplace=True)\n",
        "comments_df.drop_duplicates(subset=['post_id', 'comment'], keep='first', inplace=True)\n",
        "\n",
        "# Fill missing values\n",
        "posts_df.fillna('no_text', inplace=True)\n",
        "comments_df.fillna('No', inplace=True)\n",
        "\n",
        "# Clean posts text\n",
        "def clean_html(text):\n",
        "    soup = BeautifulSoup(text, 'html.parser')\n",
        "\n",
        "    clean_text = soup.get_text(separator=' ')\n",
        "    # Remove punctuation and lowercasing\n",
        "    clean_text = re.sub(r'[^\\w\\s]', '', clean_text).lower()\n",
        "    return clean_text\n",
        "\n",
        "posts_df['cleaned_post_text'] = posts_df['post_text'].apply(clean_html)\n",
        "\n",
        "# Display the cleaned DataFrame\n",
        "print(posts_df.head())\n",
        "\n",
        "#Make copy for data operations\n",
        "df_posts1 = posts_df.copy()\n",
        "df_comments1 = comments_df.copy()"
      ],
      "metadata": {
        "id": "g-CwBdbo44jA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7edfa63f-2600-47dd-f373-ffc8f9055a80"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                   id           series  \\\n",
            "0  755268424716910592  The Mandalorian   \n",
            "1  755267962199539712  The Mandalorian   \n",
            "2  755267795477987328  The Mandalorian   \n",
            "3  755267744442826752  The Mandalorian   \n",
            "4  755267171554344960  The Mandalorian   \n",
            "\n",
            "                                               title  \\\n",
            "0                   mando doodle with my new markers   \n",
            "1                Cowboy DinLuke for @plattenbauprinz   \n",
            "2  ¿Has intentado este método revolucionario para...   \n",
            "3                                            no_text   \n",
            "4  i would pay so much money to watch this scene ...   \n",
            "\n",
            "                                           post_text  likes  shares  reblogs  \\\n",
            "0  <p><figure class=\"tmblr-full\"><img src=\"https:...      0       0        0   \n",
            "1  <p><figure class=\"tmblr-full\"><img src=\"https:...      0       0        0   \n",
            "2  <p><h1><b>&iquest;Has intentado este m&eacute;...      0       0        0   \n",
            "3  <p><figure class=\"tmblr-full\"><img src=\"https:...      0       0        0   \n",
            "4  <p><p>i would pay so much money to watch this ...      1       0        0   \n",
            "\n",
            "                                   cleaned_post_text  \n",
            "0                   mando doodle with my new markers  \n",
            "1            \\tcowboy dinluke for  plattenbauprinz    \n",
            "2  has intentado este método revolucionario para ...  \n",
            "3                                                     \n",
            "4  i would pay so much money to watch this scene ...  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Resentiment level analysis"
      ],
      "metadata": {
        "id": "_g-5Byx1vREO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Combine the post text and comments for analysis\n",
        "df_posts1['combined_text'] = df_posts1['post_text'] + ' ' + df_posts1['title']\n",
        "df_comments1['combined_text'] = df_comments1['comment']"
      ],
      "metadata": {
        "id": "as08IVI1vKtS"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "source": [
        "# Initialize the sentiment analyzer\n",
        "sid = SentimentIntensityAnalyzer()\n",
        "\n",
        "# Function to analyze sentiment\n",
        "def analyze_sentiment(text):\n",
        "    return sid.polarity_scores(text)\n",
        "\n",
        "# Apply sentiment analysis\n",
        "df_posts1['sentiment'] = df_posts1['combined_text'].apply(analyze_sentiment)\n",
        "df_comments1['sentiment'] = df_comments1['combined_text'].apply(analyze_sentiment)\n",
        "\n",
        "# Extract sentiment scores\n",
        "df_posts1['compound'] = df_posts1['sentiment'].apply(lambda x: x['compound']) #This line creates the 'compound' column\n",
        "df_comments1['compound'] = df_comments1['sentiment'].apply(lambda x: x['compound'])\n",
        "\n",
        "# Sentiment distribution\n",
        "plt.figure(figsize=(10, 5))\n",
        "sns.histplot(df_posts1['compound'], bins=20, kde=True) # Now you can access the 'compound' column\n",
        "plt.title('Sentiment Distribution of Posts')\n",
        "plt.xlabel('Compound Sentiment Score')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "-G0FP-hspKEF",
        "outputId": "579e820d-0bd0-402c-9022-90dab45da7a0"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Here is a sentiment distribution of posts and comments about new Disney Dtar Wars series. It is equally distributed. We can notice, that most part of posts are neutral,but slightly negative. But we also have smaller peaks on most negative and most positive sentiment. And positive peak is wider distributed, so in Tumbler we can find more positive posts about new adaptation."
      ],
      "metadata": {
        "id": "qp0NUXnjpsjO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_posts3 = posts_df.copy()"
      ],
      "metadata": {
        "id": "zcv7mWVr5s1o"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Combine the post text for analysis\n",
        "df_posts3['combined_text'] = df_posts3['post_text'] + ' ' + df_posts3['title']\n",
        "\n",
        "# Initialize the sentiment analyzer\n",
        "sid = SentimentIntensityAnalyzer()\n",
        "\n",
        "# Function to analyze sentiment\n",
        "def analyze_sentiment(text):\n",
        "    return sid.polarity_scores(text)['compound']\n",
        "\n",
        "# Apply sentiment analysis and calculate mean sentiment for each series\n",
        "df_posts3['compound'] = df_posts3['combined_text'].apply(analyze_sentiment)\n",
        "mean_sentiment_by_series = df_posts3.groupby('series')['compound'].mean().reset_index()\n",
        "\n",
        "# Plot sentiment distribution for each series using box plots\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.boxplot(x='series', y='compound', data=df_posts3, order=mean_sentiment_by_series['series'])\n",
        "plt.title('Mean Sentiment Distribution of Posts for Each Star Wars Series')\n",
        "plt.xlabel('Star Wars Series')\n",
        "plt.ylabel('Mean Compound Sentiment Score')\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 669
        },
        "id": "L31cXuBL29QH",
        "outputId": "bab07107-528b-4c6e-f496-01b02477af0f"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA/0AAAKMCAYAAAC5NtiwAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAC9IklEQVR4nOzdd3gU1f/28XvTSSAJNaGE0Hs1SBVQiQTEghQpIhAUUCkiUkQUpAQElSYIoiAdRMQGSAe/UkSkigLSo0JCMwk1bef5wyf7Y00C2bCbDcv7dV17wZ45M/OZ3ckm987MGZNhGIYAAAAAAIDLcXN2AQAAAAAAwDEI/QAAAAAAuChCPwAAAAAALorQDwAAAACAiyL0AwAAAADgogj9AAAAAAC4KEI/AAAAAAAuitAPAAAAAICLIvQDAAAAAOCiCP0A4EJOnz4tk8mkefPmObsUpytVqpS6d+/u8PVk9Jp3795defPmdfi605hMJr3zzjs5tr7s2L17txo2bCg/Pz+ZTCbt37/f2SU51P2wvQ8//LCqVavm7DLgRO+8845MJpOzywBwB4R+ADlq3rx5MplMMplM2rZtW7rphmEoJCREJpNJTzzxhBMqzLqkpCRNnTpVtWvXlr+/vwIDA1W1alX16tVLR44ccei6lyxZoilTpjh0HY60Zs0am0Lqww8/bNlv3Nzc5O/vr4oVK+r555/Xhg0bnFZXTsrNtd1JcnKy2rdvr8uXL2vy5MlauHChQkNDM+y7detWy3ttMpnk6empMmXKqGvXrjp58qRD6hs3bpy+/vpruy3Plu21h/++Zv99LFu2zGHrvhtZ/QzdsWOH3nnnHcXFxeVIXa+88orc3Nx0+fJlq/bLly/Lzc1N3t7eunnzptW0kydPymQy6c0338yRGm/nwoULevXVV1WpUiXlyZNHRYoUUd26dTV06FBdvXrV2eUBcAIPZxcA4P7k4+OjJUuW6KGHHrJq/+GHH/TXX3/J29vbSZVlXdu2bfX999+rU6dO6tmzp5KTk3XkyBGtWrVKDRs2VKVKlRy27iVLlujQoUMaMGCAVXtoaKhu3LghT09Ph63bHtasWaMZM2bYFGJLlCih8ePHS5KuXbum48ePa+XKlVq0aJGeffZZLVq0yGq7jx49Kjc3277bzk5dOfWa3662GzduyMMj9/5KP3HihM6cOaNPPvlEL774Ypbm6d+/vx588EElJydr7969mj17tlavXq1ff/1VxYoVs2t948aNU7t27dS6dWu7LC8722sPaa/ZfzVo0CDHarBFVj9Dd+zYoVGjRql79+4KDAx0eF0PPfSQZs6cqe3bt+vJJ5+0tO/YsUNubm5KTk7WL7/8YvX7a/v27ZZ5neny5cuqU6eOEhIS1KNHD1WqVEmXLl3SwYMHNXPmTL388st2PQvprbfe0htvvGG35QFwjNz7FwIAl/b444/riy++0LRp06zCypIlSxQWFqaLFy86sbo72717t1atWqWoqKh0R3amT5+eY0ek/stkMsnHx8cp63a0gIAAdenSxart3XffVf/+/fXRRx+pVKlSmjBhgmWao784SklJkdlslpeXl9Nfc2ev/07Onz8vSTYFtsaNG6tdu3aSpMjISFWoUEH9+/fX/PnzNWzYMEeUaTfZ2d47uXbtmvz8/G7b59bXLLdz9meoYRi6efOm8uTJk25aWnDftm2bVejfvn27atSooRs3bmjbtm1WAX/btm1yc3NTw4YN76quWz9XsmPOnDmKjo7W9u3b09WSkJCQ7eX+V9r+6OHhkau/cATwL07vB+AUnTp10qVLl6xOzU5KStKKFSvUuXPnDOcxm82aMmWKqlatKh8fHwUFBal37976559/rPp98803atWqlYoVKyZvb2+VLVtWY8aMUWpqqlW/tOtRf//9dz3yyCPy9fVV8eLFNXHixDvWf+LECUlSo0aN0k1zd3dXwYIFrdr+/vtv9ejRQ0FBQfL29lbVqlU1d+5cqz5pp+guX75cUVFRKlGihHx8fNSsWTMdP37cqu7Vq1frzJkzltN3S5UqJen215dHR0friSeeUN68eVW8eHHNmDFDkvTrr7/q0UcflZ+fn0JDQ7VkyZJ02xQXF6cBAwYoJCRE3t7eKleunCZMmCCz2Wzpk7bu999/X7Nnz1bZsmXl7e2tBx98ULt377aqJ23dt56CnB3u7u6aNm2aqlSpounTpys+Pt4y7b/X9CcnJ2vUqFEqX768fHx8VLBgQT300EOWffB2dd26bVOmTLFs2++//37bcRROnjypiIgI+fn5qVixYho9erQMw7BMT3vPt27dajXff5d5p9cso2v69+3bp5YtW8rf31958+ZVs2bN9NNPP1n1SbvcZvv27Ro4cKAKFy4sPz8/PfPMM7pw4cKd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Z5WamqoxY8akm5aSkmIJTWlHFm49ypSUlKSPPvrIrnUfO3ZM0dHR6drj4uK0c+dO5c+fX4ULF5a7u7vatm2rL7/80nI0+lZZvS3af/n5+eXYaZDPPvusdu7cqXXr1qWbFhcXp5SUFJuXmRZu7vZe3Kmpqerfv78OHz6s/v37y9/fP9O+ly5dsnqeN29elStXTomJiXavK8306dMt/zcMQ9OnT5enp6eaNWsm6d8g6O7unm5chIz216zW5u7urubNm+ubb76xuowgNjZWS5Ys0UMPPXTb1ymrihYtqlq1amn+/PlWNR06dEjr16/X448/ftfryEzaKevTpk2z+lmfM2eO4uPjLXdwSEhISLd/Vq9eXW5ubune9/++rqmpqel+xooUKaJixYpZzZtVzny90mT0+RgfH6/PPvvMql/z5s2VL18+jR8/Xjdv3rSaZq+zP7L6GSplvu9ndXuyKy3IT5gwQb6+vlZHxOvWrSsPDw/L7QlvDf0Z1bVr1y7t3Lkzy+v+7+eVl5eXqlSpIsMwlJycnOl8u3btyvCymp9//lmXLl2yXF4SFhamsmXL6v3337dcHnWr7P5uatOmjdzd3TVq1Kh0+4phGJbtyurPJgD74Eg/AKe7022FJKlp06bq3bu3xo8fr/3796t58+by9PTUsWPH9MUXX2jq1Klq166dGjZsqPz586tbt27q37+/TCaTFi5caPfTlA8cOKDOnTurZcuWaty4sQoUKKC///5b8+fP19mzZzVlyhTLH37vvvuutmzZonr16qlnz56qUqWKLl++rL1792rjxo26fPmyzesPCwvT559/roEDB+rBBx9U3rx5b/ulyd0YPHiwvv32Wz3xxBPq3r27wsLCdO3aNf36669asWKFTp8+bbmNli31S1L//v0VEREhd3d3dezY8bbzxMfHa9GiRZL+vY3g8ePHtXLlSp04cUIdO3bM8AuhW1WpUkUPP/ywwsLCVKBAAf3yyy+W27HdTV2Z8fHx0dq1a9WtWzfVq1dP33//vVavXq0333zTEmYCAgLUvn17ffjhhzKZTCpbtqxWrVqVbpwEW2sbO3asNmzYoIceekivvPKKPDw89PHHHysxMTFL91DPqvfee08tW7ZUgwYN9MILL1huQRcQEKB33nnHbuv5r8KFC2vYsGEaNWqUWrRooaeeekpHjx7VRx99pAcffNAyhsfmzZvVt29ftW/fXhUqVFBKSooWLlxo+TIuTVhYmDZu3KhJkyapWLFiKl26tCpWrKgSJUqoXbt2qlmzpvLmzauNGzdq9+7d+uCDD7JVt6Nfrx9//DFdSJf+vYSoRo0aat68uby8vPTkk0+qd+/eunr1qj755BMVKVLEcgRY+vfo7+TJk/Xiiy/qwQcftNyb/cCBA7p+/brmz59/17Xa8hmatu8PHz5cHTt2lKenp5588sksb0921a1bV15eXtq5c6cefvhhq0sNfH19VbNmTe3cuVOBgYFW4x888cQTWrlypZ555hm1atVKp06d0qxZs1SlSpUMA3ZGmjdvruDgYDVq1EhBQUE6fPiwpk+frlatWt127JKFCxdq8eLFeuaZZxQWFiYvLy8dPnxYc+fOlY+Pj+USBTc3N3366adq2bKlqlatqsjISBUvXlx///23tmzZIn9/f3333Xc2v2Zly5bV2LFjNWzYMJ0+fVqtW7dWvnz5dOrUKX311Vfq1auXBg0alOWfTQB2koN3CgAAq1v23c5/b9mXZvbs2UZYWJiRJ08eI1++fEb16tWNIUOGGGfPnrX02b59u1G/fn0jT548RrFixYwhQ4YY69atS3drtMxuA9etW7cMb4d3q9jYWOPdd981mjZtahQtWtTw8PAw8ufPbzz66KPGihUrMuzfp08fIyQkxPD09DSCg4ONZs2aGbNnz7b0yew2Xxndvu3q1atG586djcDAQEOSpd7Mbh/n5+eXrqbMtj+j1/7KlSvGsGHDjHLlyhleXl5GoUKFjIYNGxrvv/++kZSUZLXu9957L90y9Z9byqWkpBj9+vUzChcubJhMpjvevi/t1l5pj7x58xrly5c3unTpYqxfvz7Def57y76xY8cadevWNQIDA408efIYlSpVMqKioiz1366u223b7V7zEydOGM2bNzd8fX2NoKAgY+TIkVa3mDMMw7hw4YLRtm1bw9fX18ifP7/Ru3dv49ChQ+mWebvX7L+vr2EYxt69e42IiAgjb968hq+vr/HII48YO3bssOqT2c9jZrcSzMjGjRuNRo0aGXny5DH8/f2NJ5980vj9998zXJ4tt+zLSt/p06cblSpVMjw9PY2goCDj5ZdfNv755x/L9JMnTxo9evQwypYta/j4+BgFChQwHnnkEWPjxo1Wyzly5IjRpEkTI0+ePIYko1u3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+Wf5+/vL09Mzp0tFLnXrPnTz5k0lJibKZDJp2rRpunz5sjw9PWUYhkqWLKlDhw7pvffe05gxYzR69Gjt2LFDnp6eSklJsXymArmB8f+P1v7000+aOHGixowZo6+++krSv2f3BQUFaeLEifr666+Vmpqq4cOHKyIiQpLYl+9DaZ+DJpNJ69evV2RkpN58800dOHBAX331lebPn69hw4bp2LFjkqQJEyYoMjJSb7zxxj0/kCmn98MpzGaz3Nz+/c5p1qxZGjNmjDp27KjevXurf//+GjlypBo0aJBuHsMwlJSUdM/eIxOOl5qaqhkzZmju3LmqXr26PvvsM3l4eCguLk6dO3dWmTJl9MEHH8jLy8tyunPPnj114sQJrVu3jpCEXCftj9pNmzZp/fr1On78uNq0aaOaNWuqWrVq2rt3rx5//HEFBASoSpUqKlq0qJYvX66NGzeqVq1azi4fuczYsWPVoEEDNWvWTEeOHFHjxo3VuHFjzZkzR/nz5890vtTUVEIScpW0z8Yvv/xSL730kurVq6f8+fNr8eLFeuuttzR69GglJSWpXbt2Onr0qAICAnTy5El999136f7GhGtbtGiRHnnkERUvXlySlJCQoMGDB6t48eIaMWKETp06pccee0y1a9fWxo0b1aRJE02YMEGVKlWSJJ0/f15FihRx5ibcNS7MglO4ubkpJSVFHh4eeumll2QYhsaPHy+TyaR9+/apa9euql27tgzD0PXr1+Xu7q6yZctq4sSJBH7clru7u1588UX5+flpzpw56tKlixYtWqTAwEC1b99eL774oqpWraru3btb9qWrV6+qfPny/EGLXMlkMumrr75S586d1a5dO12+fFkTJkxQwYIFNXr0aDVu3Fhr165Vly5d9M0332jVqlUaPHiwSpcu7ezSkcukpKTo+PHj2rVrl8LCwlSpUiWtXbtWLVq0UK9evTRz5kwVKFBA3bt3V926ddW3b19LsOLzEc6WdsAobZ9Mux57wIABGjVqlF555RX99ddfWr58ua5fv67U1FR5eXlpxYoVmjdvnq5evaonnnhCFSpUcPamIAdt375dCxYsUJMmTSxtnp6eCg8P1wMPPKDLly+rXbt2evjhh/Xpp5/q888/V6dOnZScnKxp06apXLly93zglzjSDycwMhlQatq0aRo9erRKlCihqlWrqkGDBkpISNDF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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "In that plot we can notice, that 3 series - Mandalorian, The Book of Bobba Fett and Ahsoka were positevely received, especially Bobba Fett. The Acolyte and Obi-Wan got negative resentiment, and Acolyte was neutrally received.\n",
        "\n",
        "The neutral and partly negative resentiment of Andor could be explained with tragic plot and side heroes of a side pipelineof the universe, involved into the plot."
      ],
      "metadata": {
        "id": "Hs83ArNv9D1r"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Natural language analysis"
      ],
      "metadata": {
        "id": "Ohf53FnxvfsZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize VADER sentiment analyzer\n",
        "sid = SentimentIntensityAnalyzer()\n",
        "\n",
        "# Function to extract emotional words from text\n",
        "def get_emotional_words(text):\n",
        "    emotional_words = []\n",
        "    words = text.split()\n",
        "    for word in words:\n",
        "        scores = sid.polarity_scores(word)\n",
        "        if scores['compound'] != 0:  # Consider words with non-zero compound sentiment\n",
        "            emotional_words.append(word)\n",
        "    return emotional_words\n",
        "\n",
        "# Apply function to each post_text\n",
        "df_posts3['emotional_words'] = df_posts3['cleaned_post_text'].apply(get_emotional_words)\n",
        "\n",
        "# Count emotional words by series\n",
        "emotional_word_counts = {}\n",
        "for series, group in df_posts3.groupby('series'):\n",
        "    emotional_words = []\n",
        "    for words_list in group['emotional_words']:\n",
        "        emotional_words.extend(words_list)\n",
        "    emotional_word_counts[series] = pd.Series(emotional_words).value_counts().head(5)\n",
        "\n",
        "# Display results\n",
        "for series, word_counts in emotional_word_counts.items():\n",
        "    print(f\"Top 5 emotional words for '{series}':\")\n",
        "    print(word_counts)\n",
        "    print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "77-OHDwFFfU_",
        "outputId": "7497c0cb-9758-4fb2-e705-4497c4f056e4"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top 5 emotional words for 'Ahsoka':\n",
            "wars    10\n",
            "like     8\n",
            "no       2\n",
            "slap     2\n",
            "love     2\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Top 5 emotional words for 'Andor':\n",
            "like        7\n",
            "no          5\n",
            "weakness    4\n",
            "fear        4\n",
            "axe         3\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Top 5 emotional words for 'Obi-Wan Kenobi':\n",
            "wars     10\n",
            "no        9\n",
            "like      5\n",
            "death     4\n",
            "sick      3\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Top 5 emotional words for 'The Acolyte':\n",
            "like      6\n",
            "no        4\n",
            "wars      4\n",
            "better    3\n",
            "killed    2\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Top 5 emotional words for 'The Book of Boba Fett':\n",
            "no      32\n",
            "like    24\n",
            "good    11\n",
            "want    11\n",
            "hand     9\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Top 5 emotional words for 'The Mandalorian':\n",
            "like    11\n",
            "no      10\n",
            "ha       9\n",
            "hand     9\n",
            "love     6\n",
            "Name: count, dtype: int64\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Here we can notice, that we have not enough posts in the database for that analysis to be fruitful. But we can notice a pattern that series with more nagative resentiment level have strong negative words in posts about them."
      ],
      "metadata": {
        "id": "mlMBXOBwvo4P"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_posts4 = posts_df.copy()\n",
        "\n",
        "# Regular expression pattern to find episode information\n",
        "episode_pattern = r'(?:Season|S)\\s*\\d+\\s*,?\\s*(?:Episode|E)\\s*\\d+'\n",
        "\n",
        "# Function to extract episode information from text\n",
        "def extract_episode_info(text):\n",
        "    match = re.search(episode_pattern, text, flags=re.IGNORECASE)\n",
        "    if match:\n",
        "        return match.group(0)\n",
        "    else:\n",
        "        return None\n",
        "\n",
        "# Apply function to extract episode information\n",
        "df_posts4['episode_info'] = df_posts4['post_text'].apply(lambda x: extract_episode_info(x))\n",
        "\n",
        "# Replace 'None' values in 'episode_info' with NaN\n",
        "df_posts4['episode_info'].replace('None', pd.NA, inplace=True)\n",
        "\n",
        "# Filter out rows where 'episode_info' is NaN (or 'None')\n",
        "df_cl_posts4 = df_posts4.dropna(subset=['episode_info'])\n",
        "\n",
        "# Display cleaned DataFrame\n",
        "print(df_cl_posts4)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7A-9J4upGVds",
        "outputId": "919f12d1-9757-4de8-be62-c9fb70c35dfa"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                    id                 series  \\\n",
            "21  755084230393020416  The Book of Boba Fett   \n",
            "23  755014162406621184  The Book of Boba Fett   \n",
            "25  754454339499802624  The Book of Boba Fett   \n",
            "29  753477550945320960  The Book of Boba Fett   \n",
            "30  753390156276482048  The Book of Boba Fett   \n",
            "38  751928733141712896  The Book of Boba Fett   \n",
            "39  751822782291132416  The Book of Boba Fett   \n",
            "\n",
            "                                                title  \\\n",
            "21  Boba Fett, Fennec Shand, and the two Gamorrean...   \n",
            "23  Boba Fett and the Sand People running across t...   \n",
            "25  Din Djarin holding Grogu, while Peli Motto sta...   \n",
            "29  Concept art by Christian Alzmann. Boba Fett ho...   \n",
            "30  Concept art by Christian Alzmann, from The Boo...   \n",
            "38  Fennec Shand listening to Boba Fett speak with...   \n",
            "39  Dokk Strassi standing in Boba's throne room. I...   \n",
            "\n",
            "                                            post_text  likes  shares  reblogs  \\\n",
            "21  <p><figure class=\"tmblr-full\"><img src=\"https:...      5       0        0   \n",
            "23  <p><figure class=\"tmblr-full\"><img src=\"https:...      3       0        0   \n",
            "25  <p><figure class=\"tmblr-full\"><img src=\"https:...      8       0        0   \n",
            "29  <p><figure class=\"tmblr-full\"><img src=\"https:...      3       0        0   \n",
            "30  <p><figure class=\"tmblr-full\"><img src=\"https:...      2       0        0   \n",
            "38  <p><figure class=\"tmblr-full\"><img src=\"https:...      1       0        0   \n",
            "39  <p><figure class=\"tmblr-full\"><img src=\"https:...      4       0        0   \n",
            "\n",
            "                                    cleaned_post_text         episode_info  \n",
            "21  boba fett fennec shand and the two gamorrean g...  Season 1, Episode 1  \n",
            "23  boba fett and the sand people running across t...  Season 1, Episode 2  \n",
            "25  din djarin holding grogu while peli motto stan...  Season 1, Episode 7  \n",
            "29  concept art by christian alzmann boba fett hol...  Season 1, Episode 1  \n",
            "30  concept art by christian alzmann from the book...  Season 1, Episode 1  \n",
            "38  fennec shand listening to boba fett speak with...  Season 1, Episode 3  \n",
            "39  dokk strassi standing in bobas throne room ima...  Season 1, Episode 4  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Group by series and episode_info, aggregate likes and comments\n",
        "agg_df = df_cl_posts4.groupby(['series', 'episode_info']).agg({\n",
        "    'likes': 'sum',\n",
        "    'id': 'count'  # Counting number of posts as proxy for discussion\n",
        "}).reset_index()\n",
        "\n",
        "# Sort by total engagement (likes and number of posts)\n",
        "agg_df['total_engagement'] = agg_df['likes'] + agg_df['id']  # Adjust this based on your specific metrics\n",
        "\n",
        "# Rank episodes within each series based on engagement\n",
        "agg_df['episode_rank'] = agg_df.groupby('series')['total_engagement'].rank(method='dense', ascending=False)\n",
        "\n",
        "# Find the most popular episode for each series\n",
        "popular_episodes = agg_df.loc[agg_df['episode_rank'] == 1]\n",
        "\n",
        "# Display the results\n",
        "print(\"Most Popular Episodes by Series:\")\n",
        "print(popular_episodes[['series', 'episode_info', 'total_engagement']])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xhr7kNbYLQ5O",
        "outputId": "0c4606e2-61c9-490a-8a0e-4fceaee86306"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Most Popular Episodes by Series:\n",
            "                  series         episode_info  total_engagement\n",
            "0  The Book of Boba Fett  Season 1, Episode 1                13\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "An episode with the highest engagement level inside all dataset is the first episode of Bobba Fett.\n",
        "\n",
        "### Themes and characters analysis"
      ],
      "metadata": {
        "id": "F8mPfuWiwGWt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_posts5 = posts_df.copy()"
      ],
      "metadata": {
        "id": "vdTYh06OMDra"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize SpaCy for Named Entity Recognition\n",
        "nlp = spacy.load('en_core_web_sm')\n",
        "\n",
        "# Function to extract named entities\n",
        "def extract_entities(text):\n",
        "    doc = nlp(text)\n",
        "    entities = [ent.text for ent in doc.ents if ent.label_ == 'PERSON']  # Extracting only PERSON entities as an example\n",
        "    return entities\n",
        "\n",
        "# Extract named entities from cleaned_post_text column\n",
        "df_posts5['entities'] = df_posts5['cleaned_post_text'].apply(extract_entities)\n",
        "\n",
        "# Flatten list of entities\n",
        "all_entities = [ent for sublist in df_posts5['entities'].tolist() for ent in sublist]\n",
        "\n",
        "# Count occurrences of each entity\n",
        "entity_counts = Counter(all_entities)\n",
        "\n",
        "# Example of getting top 10 most common characters/themes\n",
        "top_entities = entity_counts.most_common(10)\n",
        "print(\"Top 10 Most Common Characters/Themes:\")\n",
        "for entity, count in top_entities:\n",
        "    print(f\"{entity}: {count}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JRjBRifmOZQ0",
        "outputId": "78369329-206a-4997-8088-6870af95e968"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top 10 Most Common Characters/Themes:\n",
            "boba fett: 25\n",
            "eric tyson: 6\n",
            "para el: 4\n",
            "del mercado: 4\n",
            "fett: 4\n",
            "jecki: 4\n",
            "quigon jinn: 3\n",
            "ben: 3\n",
            "hayden christensen: 3\n",
            "de las: 2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The most popular theme, again, is Bobba Fett"
      ],
      "metadata": {
        "id": "UQSA_wUjjp0t"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "main_heroes_counts = Counter({\n",
        "    'Bounty Hunter': 0,\n",
        "    'Darth Vader': 0,\n",
        "    'Luke Skywalker': 0,\n",
        "    'Mandalorian': 0,\n",
        "    'Boba Fett': 0,\n",
        "    'Baby Yoda': 0,\n",
        "    'Obiwan Kenobi': 0,\n",
        "    'Ahsoka Tano': 0,\n",
        "    'Grogu': 0,\n",
        "    'Mayfeld': 0,\n",
        "    'Din Djarin': 0,\n",
        "    'Greef Karga': 0,\n",
        "    'Cara Dune': 0,\n",
        "    'The Armorer': 0,\n",
        "    'Osha': 0,\n",
        "    'Mae': 0,\n",
        "    'Sol': 0,\n",
        "    'Qimir': 0,\n",
        "    'Cassian Andor': 0,\n",
        "    'Syril Karn': 0,\n",
        "    'Dedra Meero': 0\n",
        "})"
      ],
      "metadata": {
        "id": "5olD-trJVWJl"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Mapping dictionary for combining counts\n",
        "mapping = {\n",
        "    'Baby Yoda': 'Grogu',\n",
        "    'Din Djarin': 'Mandalorian'\n",
        "}"
      ],
      "metadata": {
        "id": "5idqEBPu14e-"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to count entities in text and combine specific entities\n",
        "def count_entities(text, entity_counts, mapping):\n",
        "    for entity in entity_counts.keys():\n",
        "        if entity.lower() in text.lower():\n",
        "            entity_counts[entity] += 1\n",
        "    for old, new in mapping.items():\n",
        "        entity_counts[new] += entity_counts.pop(old, 0)\n",
        "    return entity_counts"
      ],
      "metadata": {
        "id": "sCDT9AR52D8e"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for index, row in df_posts5.iterrows():\n",
        "    main_heroes_counts = count_entities(row['cleaned_post_text'], main_heroes_counts, mapping)\n",
        "\n",
        "# Convert to DataFrame for visualization\n",
        "df_main_heroes_counts = pd.DataFrame.from_dict(main_heroes_counts, orient='index', columns=['count'])\n",
        "\n",
        "# Plotting the counts\n",
        "plt.figure(figsize=(10, 6))\n",
        "df_main_heroes_counts.sort_values(by='count', ascending=False).plot(kind='bar', color='skyblue')\n",
        "plt.title('Occurrences of Main Heroes in Text')\n",
        "plt.xlabel('Heroes')\n",
        "plt.ylabel('Count')\n",
        "plt.xticks(rotation=90)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Display the counts\n",
        "print(\"Occurrences of Main Heroes in Text:\")\n",
        "print(df_main_heroes_counts)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 869
        },
        "id": "M2cqDv24VnFT",
        "outputId": "28243441-f2b0-4749-b8f9-3c16764cf825"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Occurrences of Main Heroes in Text:\n",
            "                count\n",
            "Bounty Hunter       2\n",
            "Darth Vader         2\n",
            "Luke Skywalker      1\n",
            "Mandalorian        12\n",
            "Boba Fett          12\n",
            "Obiwan Kenobi       4\n",
            "Ahsoka Tano         5\n",
            "Grogu              11\n",
            "Mayfeld             0\n",
            "Greef Karga         1\n",
            "Cara Dune           1\n",
            "The Armorer         1\n",
            "Osha                5\n",
            "Mae                 1\n",
            "Sol                 6\n",
            "Qimir               6\n",
            "Cassian Andor       0\n",
            "Syril Karn          1\n",
            "Dedra Meero         1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can notice, that the most popular characters are Mandalorian, Bobba Fett, and Grogu. Then come main heroes of the most recent series \"The Acolyte\", cause it's premieering now.\n",
        "\n",
        "###Engagement metrics analysis"
      ],
      "metadata": {
        "id": "s8vGoLJgXE_7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_posts6 = posts_df.copy()"
      ],
      "metadata": {
        "id": "YIZ52RLEgrhn"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Aggregate engagement metrics\n",
        "engagement_metrics = df_posts6.groupby('series').agg({\n",
        "    'likes': 'sum',\n",
        "    'shares': 'sum',\n",
        "    'reblogs': 'sum'\n",
        "}).reset_index()\n",
        "\n",
        "\n",
        "# Print or display the aggregated engagement metrics\n",
        "print(\"Overall Engagement Metrics by Series:\")\n",
        "print(engagement_metrics)\n",
        "\n",
        "# Visualize engagement metrics\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(engagement_metrics['series'], engagement_metrics['likes'], label='Likes')\n",
        "plt.bar(engagement_metrics['series'], engagement_metrics['reblogs'], bottom=engagement_metrics['likes'], label='Reblogs')\n",
        "plt.bar(engagement_metrics['series'], engagement_metrics['shares'], bottom=engagement_metrics['likes'] + engagement_metrics['reblogs'], label='Shares')\n",
        "plt.xlabel('Series')\n",
        "plt.ylabel('Engagement Count')\n",
        "plt.title('Overall Engagement Metrics by Series')\n",
        "plt.legend()\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 808
        },
        "id": "Qe0zTVEikSk5",
        "outputId": "7e6e3865-174e-431b-ae58-a50b4a13adea"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overall Engagement Metrics by Series:\n",
            "                  series  likes  shares  reblogs\n",
            "0                 Ahsoka   1578       0        0\n",
            "1                  Andor    327       0        0\n",
            "2         Obi-Wan Kenobi    132       0        0\n",
            "3            The Acolyte     35       0        0\n",
            "4  The Book of Boba Fett    196       0        0\n",
            "5        The Mandalorian     60       0        0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ahsoka is showing the highest engagement metrics from the whole set.\n",
        "\n",
        "###Conclusion\n",
        "From that analysis we can notice, that Star wars fans don't have any negative sentiment for strong woman characters, like Ahsoka. But still the quality of plot, direction and action matters more than social agenda. Even well known character, like Obi-Wan Kenobi, can't call a positive feedback without strong and logical plot.\n",
        "The ammount of data analysed is not big enough to find significant insights inside the NLP, but the functions and plots, created here will be able to show them when amount of data gets bigger."
      ],
      "metadata": {
        "id": "XFjF4pNt3lXF"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "8Qrg2Zwqxpdm"
      },
      "execution_count": 28,
      "outputs": []
    }
  ]
}
